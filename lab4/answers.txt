# Fill in your name, student ID, and email address in this file.
# If you are working in a team, fill out the information for both team 
# members.

# SUBMIT THE LAB ONLY ONCE (from only one partner). This file will be
# automatically parsed in order to give both team members credit for the
# lab.

# You need to fill in the EXERCISE sections describing your solutions
# for Tasks 1, 2, and 3, as well as write the corresponding code.
# If you did one or more extra credit problems, indicate which one in the
# appropriate section below (remove the # sign first). If you have any other
# information you'd like us to know, please add it at the end of the file.

# Partner 1
Name: Shiyuan Yang
Student ID: 804397286
Email: ysyyork@gmail.com

# Partner 2 (if you're working in a team)
Name: Cheyun Xia
Student ID: 504422348
Email: xiacheyunivan@ucla.edu

# EXERCISE 1: What method you used to make your peer download and upload
#    files in parallel?  (~1-3 sentences)
We use fork to fork different processes for parallel downloading and 
uploading. Each process will handle one donwload task and similarly, 
each process will handle one upload task. However, only downloading 
finishes, uploading can start. 


# EXERCISE 2A: What conditions did you find and fix that would have
#    triggered a buffer overrun bug?  (~1-3 sentences each)
In start_down_load function, there is a parameter filename which will
be strcpyed to t->filename. However, if the filename length is larger
than FILENAMESIZ, it will cause a segmentation fault. So we use 
strncpy(t->filename, filename, FILENAMESIZ) to restrict the filename
length. 

# EXERCISE 2B: What other robustness problems did you fix?  (~1-3 sentences
#    each)
1. Forbid download files outside current directory.
In function task_upload, before open the file requested by peer, we 
check the current path and compare it with the file path requested 
to see whether the file path is inside the current directory. If not, 
stop serving the file for this peer. 

2. Forbid download files which do not exist.
Also in function task_upload, we use stat function to check whether 
the file_path contains valid data. If not, stop serving the file. 

3. Prevent unlimited downloading
Other peers can keep on sending data to the downloading peer which 
will consume too many disk spaces. So we set a upper size boundary 
for which is 20MB. If the downloading file size is greater than this 
boundary, we will stop this downloading and restart a new one. 

4. Popular track issue
This bug is caused by the inconsistent between small buffer size of 
one task and larger peer list the tracker returns. To hold more data, 
we increment the TASKBUFSIZ to 100000. 


# EXERCISE 3: Describe the attacks you implemented for "evil mode".  Why
#    are they attacks?  (~3-10 sentences each)
1. Infinite upload
When the peer want to download something from our peer, we simply 
give them the file /dev/zero which provides infinite null characters. 
By this way, if the peer requesting file doesn't implement file size 
checking, it will get very large file which will use up its space. 

2. Large filename attack
When downloading, the peer can send a large filename which will overrun 
the uploading peer's buffer. In evil_mode, we set the filename to twice 
of the FILENAMESIZ. 


# Extra credit problems
#Extra credit problem: none

# Add any other information you'd like us to know below this line.
